= Your own Shibboleth Service Provider within the Service Provider Federation
Sander Maijers <sander@clarin.eu>
:icons: font
:toc: right
:toclevels: 4
:sectnums:
:source-highlighter: pygments

// asciidoctor -a data-uri -b html5 Shib_SP_tutorial.asc

== Introduction
This is a tutorial about setting up a basic SAML Service Provider (SP) for the https://www.clarin.eu/spf[CLARIN Service Provider Federation], using the Shibboleth SP software package.

=== Requirements and target audience
Familiarity with DNS and HTTP, SSH and shell interaction, XML and Unix/Linux is a prerequisite for understanding most material. I use a CentOS 7 image on Google Compute Engine (GCE). I will not cover the details of GCE, as you can use any hosting provider that gives you root access to a Linux server and an external static IP.

== Preparation: creating an SP host
=== Creating a host and making it reachable from outside
Visit https://console.developers.google.com/ and create a project, then an instance under that project. In the following, I assume that you will use a project named 'test-sp' with an instance named 'instance-1'. Furthermore, you must assign a clear public DNS *domain name* to one of the SP host's *static external IP addresses* via your DNS hosting provider or perhaps GCE itself. I will refer to your computer, running a modern Unix-like OS with common utilities such as `curl`, `OpenSSH` and `rsync` as well an XML editor, as *your workstation* and to the remote computer on which the SP will be set up as *the SP host*. Please also tick the 'Allow HTTPS traffic' under 'Network' in the instance settings.

=== Establish SSH login
On your workstation, issue for example:

[source,Sh]
----
ssh-keygen -t 'ed25519' -C 'Your_Google_Name@gmail.com' -n 'Your_Google_Name@gmail.com' -f ~/'.ssh/Your_Google_Name@test-sp.clarin.eu' &&
cat ~/'.ssh/Your_Google_Name@test-sp.clarin.eu.pub'
----
replacing `test-sp.clarin.eu` with the fully-qualified domain name (FQDN) of your SP host that you set with your DNS hosting provider, and `Your_Google_Name` with your own Google login name.

Now copy and paste your SSH public key, which is now displayed as a result of the last `cat` command, key into https://cloud.google.com/compute/docs/console#sshkeys[your GCE configuration].

In order to work with the VM from your own command line instead of the web terminal, prepend the following snippet to the contents of `~/.ssh/config`:

[source]
----
Match originalhost test-sp
    Hostname test-sp.clarin.eu
    User Your_Google_Name
    IdentityFile "%d/.ssh/Your_Google_Name@test-sp.clarin.eu"
----
replacing `test-sp.clarin.eu` with the fully-qualified domain name (FQDN) of your SP host, and `Your_Google_Name` with your own Google login name.

You should now SSH into your SP host from a shell on your workstation:

[source,Sh]
----
ssh 'test-sp'
----
In case you cannot connect, please note that once you register the DNS record for your SP host, it may still take up to a day before this propagates to your workstation and other computers. You can decide to put the external static IP address as `Hostname` in your OpenSSH configuration instead of the FQDN, but you will still run into issues later on. So it's best to be patient.

NOTE: From now on, work on the SP host except I when state otherwise.

=== Installation and updating of software
Begin by updating your OS packages:

[source,Sh]
----
sudo yum makecache fast &&
sudo yum update
----

Then install the Shibboleth package repository so that your OS' package utilities such as `yum` will manage your Shibboleth installation:

[source,Sh]
----
(cd '/etc/yum.repos.d/' &&
sudo curl -v --location --remote-name 'http://download.opensuse.org/repositories/security://shibboleth/CentOS_7/security:shibboleth.repo')
----

Now install Shibboleth SP (`shibd`) and Apache HTTP server (`httpd`)

[source,Sh]
----
sudo yum install 'shibboleth' 'httpd'
----

Disable the Apache HTTP server and Shibboleth SP after bootup for now:

[source,Sh]
----
sudo systemctl disable 'shibd' 'httpd'
----

Optionally, make sure your OS can find current versions of other software packages, which is critical if you e.g. wish to host a Python web application:

[source,Sh]
----
sudo yum install 'epel-release' &&
sudo mkdir '/srv/installers/' &&
(cd '/srv/installers/' &&
sudo curl -v --location --remote-name 'https://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-13.ius.centos7.noarch.rpm' &&
sudo rpm --hash --upgrade -v 'ius-release-1.0-13.ius.centos7.noarch.rpm' &&
sudo rm 'ius-release-1.0-13.ius.centos7.noarch.rpm')
----

Optionally, you may find it very helpful later into this tutorial to have set up a more usable text editor than the default `vi`:

[source,Sh]
----
sudo yum install 'nano' &&
printf '%s\n' 'EDITOR=nano export EDITOR ; ' >> ~/'.bashrc' &&
. ~/'.bashrc'
----

If the GNU/Linux kernel was updated, do remember to reboot now:

[source,Sh]
----
sudo reboot
----


== Configuring Apache HTTP server

=== Changing its mode from prefork to worker

Shibboleth SP https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApacheConfig[demands that deployers run the coupled Apache HTTP server in the 'worker' mode] for performance reasons. Therefore, change Apache HTTP server's mode to 'worker' in `/etc/httpd/conf.modules.d/00-mpm.conf`.

[source,Sh]
----
sudo -e '/etc/httpd/conf.modules.d/00-mpm.conf'
----
NOTE: I will not repeat the command suggested above to edit a text file as superuser, but only mention the file's path or name. Also, you are advised to configure your text editor to make backups, otherwise, please do not expect those to be around somewhere.

=== Enabling TLS (with OpenSSL)

Following the https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Web_Servers.html#s2-apache-mod_ssl-enabling[Red Hat 7 System Administrator's Guide] is a starting point to enable TLS using OpenSSL.

[source,Sh]
----
sudo yum install mod_ssl openssl
----

If SELinux is enabled, and it is by default on Red Hat 7, please stop it from enforcing policies. https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPSELinux[Shibboleth urges us to do this], as SELinux has a hard-to-grasp impact and is even claimed to break Shibboleth SP.

Editing `/etc/selinux/config` to this effect:

[source]
----
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
#       enforcing - SELinux security policy is enforced.
#       permissive - SELinux prints warnings instead of enforcing.
#       disabled - No SELinux policy is loaded.
SELINUX=permissive  # <1>
# SELINUXTYPE= can take one of these two values:
#       targeted - Targeted processes are protected,
#       mls - Multi Level Security protection.
SELINUXTYPE=targeted
----
<1> This should work.

In my experience you will have to reboot before for this change to become effective.

=== Setting up a Virtual Host and creating a mock resource to protect

The Apache HTTP server configuration provided by many Linux distributions is rather convoluted and monolithic. An alternative configuration that relies on Virtual Host sections is more modular than such default configurations, and is practically required for this tutorial.

Create a Virtual Host for your resource or application, following the https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/System_Administrators_Guide/ch-Web_Servers.html#s2-apache-virtualhosts[Red Hat 7 System Administrator's Guide].
To start out with, you can copy a template Virtual Host configuration file into a directory from which Apache HTTP server detects and reads configuration files. To remind you, in this tutorial I assume a fully-qualified domain name of the SP host equal to `test-sp.clarin.eu`, and so I give the file this corresponding name:

[source,Sh]
----
sudo cp --archive -v '/usr/share/doc/httpd-2.4.6/httpd-vhosts.conf' '/etc/httpd/conf.d/test-sp.clarin.eu.conf'
----

First, make Apache HTTP server load the `mod_macro` module:

[source,Sh]
----
printf '%s\n' 'LoadModule macro_module modules/mod_macro.so' | sudo tee '/etc/httpd/conf.modules.d/00-macro.conf'
----

This module will help modularize the configuration.

Comment out the `Listen` directive in `'/etc/httpd/conf/httpd.conf'`, because you will want to keep this directive more clearly coupled to the Virtual Host by putting it in the same file as the Virtual Host configuration.

In `'/etc/httpd/conf.d/shib.conf'`, comment out the `Location` directive for `'/secure'`:

[source,Apache]
----
#<Location /secure>
#  AuthType shibboleth
#  ShibRequestSetting requireSession 1
#  require shib-session
#</Location>
----

You will have to put a similar snippet back into the Virtual Host configuration later.

To create a Virtual Host configuration file that uses TLS (i.e. can be reached with an `https://` URL) straightforwardly, disable the monolithic default `ssl.conf` file:

[source,Sh]
----
sudo mv -v '/etc/httpd/conf.d/ssl.conf' '/etc/httpd/conf.d/ssl.conf.disabled'
----

And fill `'/etc/httpd/conf.d/0_TLS_generic.conf'` with e.g.:

[source,Apache]
----
include::0_TLS_generic.conf[]
----

CAUTION: The contents of this helper configuration file are simply based on Red Hat 7's default `ssl.conf`, and should not be assumed to be ideal. For instance, a default self-signed X.509 certificate is used instead of a trusted certificate that you should provide for production use. Before opening your SP for production, please review all of your configuration with respect to security separately using the most current and reliable sources.

The Virtual Host configuration for your SP should now come at `'/etc/httpd/conf.d/test-sp.clarin.eu.conf'`:

[source,Apache]
----
include::test-sp.clarin.eu.conf[]
----
<1> https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPApacheConfig[Required by Shibboleth].

The actual `DocumentRoot` directory tree that is declared in `'/etc/httpd/conf.d/test-sp.clarin.eu.conf'` must be created still:

[source,Sh]
----
(sudo mkdir --mode=a+rx --parents -v '/srv/www/test-sp.clarin.eu/' ;
cd '/srv/www/test-sp.clarin.eu/' &&
sudo chown --recursive v --reference='/var/www/' '/srv/www/' &&
sudo chmod --recursive v --reference='/var/www/' '/srv/www/' &&
sudo chcon --recursive --type httpd_used_content_t '/srv/www/')
----

To create a minimal example of optionally protected static content (e.g., resources as files), make some mock content like so:

[source,Sh]
----
(cd '/srv/www/test-sp.clarin.eu/' &&
sudo mkdir -v 'protected/' &&
printf '%s\n' 'This is a protected resource.' | sudo tee 'protected/my_resource.txt' &&
printf '%s\n' 'This is an unprotected resource.' | sudo tee 'my_resource.txt')
----
// TODO: ownership, permissions given lack of SELinux??

== Configuring the Shibboleth Service Provider

First, please visit the Shibboleth Wiki on https://wiki.shibboleth.net/confluence/display/SHIB2/. Start out by reading up on the main https://wiki.shibboleth.net/confluence/display/CONCEPT/Home[the concepts]. Next, read through https://wiki.shibboleth.net/confluence/display/SHIB2/Installation[Installation]. After reading that you can move on to https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPLinuxInstall[NativeSPLinuxInstall].
Moving on, please go to https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPConfiguration[NativeSPConfiguration] and after reading that, visit https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPGettingStarted[NativeSPGettingStarted]. Based on the perhaps overwhelming information you now read, it is clear that the main Shibboleth SP configuration file `/etc/shibboleth/shibboleth2.xml` needs some changes to get your SP working.

IMPORTANT: An important source of service-disrupting errors in XML configuration files is ill-formed or invalid XML. So, mind to use the right tool for the job, an XML editor, to edit such critical XML files. A suggestion: https://www.oxygenxml.com[Oxygen XML editor].

=== Revising the main configuration file
// TODO: how to configure schemas
Now on your workstation, issue:

[source,Sh]
----
mkdir ~/'instance-1/' ;
(cd ~/'instance-1/' &&
rsync -archive --backup --itemize-changes --no-owner --no-group --relative --update -v  'instance-1:/etc/shibboleth/' .)
----

Open up your XML editor and open the file `~/'instance-1/etc/shibboleth/shibboleth2.xml'`.
A few positions in this XML document (pointed to by the following XPath expressions) should be changed to get a basic working configuration.

==== Setting your SP's unique name

You have to give your SP a unique and standard name, its `entityID`. 

* Set:
+
[source,XPath]
----
/conf:SPConfig/conf:ApplicationDefaults[1]/@entityID
----
to e.g. `\https://test-sp.clarin.eu/shibboleth`.

NOTE: This looks like a URL, but it is a URI and basically https://wiki.shibboleth.net/confluence/display/CONCEPT/EntityNaming[fictional].

==== Securing connections
You are also advised to configure your SP as secure-only by default, in terms of using TLS.

* Set
+
[source,XPath]
----
/conf:SPConfig/conf:ApplicationDefaults[1]/conf:Sessions[1]/@handlerSSL |
/conf:SPConfig/conf:ApplicationDefaults[1]/conf:Sessions[1]/@checkAddress
----
to `true`.

* Set
+
[source,XPath]
----
/conf:SPConfig/conf:ApplicationDefaults[1]/conf:Sessions[1]/@cookieProps
----
to `https`.

==== Specifying SPF IdPs

Your SP needs to know which Identity Providers (IdPs) its users may come from.

* This setting -- which is SPF-specific -- is at
+
[source,XPath]
----
/conf:SPConfig/conf:ApplicationDefaults[1]/conf:MetadataProvider[1]
----
+
What to put here is briefly described at http://www.clarin.eu/content/creating-and-testing-shibboleth-sp. Which IdPs the two SAML metadata batches referred to in the snippet are about is described at http://www.clarin.eu/content/where-do-i-find-saml-metadata-identity-federations. All in all, you will end up with the following snippet:
+
[source,XML,indent=0]
----
include::shibboleth2.xml[tags=MetadataProvider]
----

==== Letting users choose an IdP

The http://www.clarin.eu/content/clarin-discovery-service[CLARIN central Discovery Service (DS)] gives an accurate and usable listing of all IdPs that are connected to the SPF. you are advised to use it if your SP is only used for the SPF.

* Replace the
+
[source,XPath]
----
/conf:SPConfig/conf:ApplicationDefaults[1]/conf:Sessions[1]/conf:SSO[1]
----
element with the snippet at https://www.clarin.eu/node/3481[CLARIN central discovery service]:
+
[source,XML,indent=0]
----
include::shibboleth2.xml[tags=SSO]
----

==== Contact info and error pages

Make sure that your SP gives the clearest required information to users in case of errors.

* Change
+
[source,Xpath]
----
/conf:SPConfig/conf:ApplicationDefaults[1]/conf:Errors[1]/@supportContact
----
to an appropriate e-mail-address.

As https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPGettingStarted[suggested by Shibboleth], you are advised to customize your error pages as well.

==== SAML metadata template
You must create SAML metadata that describes your SP. This will be discussed in <<Creating SAML metadata about your SP for external distribution>>. For now, to configure an initial quasi SAML metadata file as template for the Metadata Generator handler, edit in `shibboleth2.xml` at:

[source,XPath]
----
/conf:SPConfig/conf:ApplicationDefaults[1]/conf:Sessions[1]/conf:Handler[@type='MetadataGenerator']
----
by replacing this element with:

[source,XML,indent=0]
----
include::shibboleth2.xml[tags=MetadataGenerator]
----

==== Finishing up the main configuration
You can remove the examples and comments explaining Shibboleth 2 defaults and functionality.

TIP: Configuration is not documentation and any documentation you leave in now may become outdated and misleading as the software changes.

If you have completed the previous sections successfully, you will now have a `shibboleth2.xml` similar in content to:

[source,XML]
----
include::shibboleth2.xml[]
----

=== Generating a key pair for your SP's cryptographic functions
The `md:EntityDescriptor` elements contain public keys. Public keys in SAML metadata about SPs are used for https://spaces.internet2.edu/display/InCFederation/Key+Usage[three purposes].
The most *relevant* two are:

* _Verification_ of the authenticity of SAML metadata that IdPs consume about SPs.
* _Encryption_ of network traffic between the SP and the IdP, on top of any transport layer encryption (https/TLS).

You must configure Shibboleth SP with the right key separately from whatever you state in SAML metadata about your SP. In principle, metadata is for _external_ distribution. However, once the key is configured the SAML Metadata Generator handler will include the public automatically in the SAML metadata about our SP.

Become superuser, and set the `umask` such that no other user will be able to read files you create:

[source,Sh]
----
sudo su
    umask 066
----

Now create a directory to store the key pair in securely, and generate the key pair:

[source,Sh]
----
mkdir --mode=u=rwx,go= '/root/keys/' ;
cd '/root/keys/' &&
command -p openssl req -new -x509 -nodes -newkey rsa:2048 -keyout 'test-sp.clarin.eu.private-key.pem' -days 3650 -subj '/CN=test-sp.clarin.eu' -out 'test-sp.clarin.eu.crt' &&
chown shibd:shibd 'test-sp.clarin.eu.private-key.pem' 'test-sp.clarin.eu.crt' &&
ln --force -v '/root/keys/test-sp.clarin.eu.private-key.pem' '/etc/shibboleth/sp-key.pem' &&
ln --force -v '/root/keys/test-sp.clarin.eu.crt' '/etc/shibboleth/sp-cert.pem' &&
exit
----

=== Creating SAML metadata about your SP for external distribution
SAML metadata that describes your SP is required for your SP to be registered with identity federations. While you create and update this SAML metadata, it is managed centrally by the SPF administration.

As described on http://www.clarin.eu/content/how-sp-metadata-distributed-national-identity-federations[this CLARIN web page], the contents of the preproduction SAML metadata batch about SPF SPs at https://infra.clarin.eu/aai/md_about_spf_sps.xml are directly sourced from the SAML metadata batch kept in the CLARIN Subversion repository at https://svn.clarin.eu/aai/clarin-sp-metadata.xml.

NOTE: You may have to temporarily configure your XML editor to accept invalid X.509 certificates when reading XML data from URLs, as you will do in the following steps. This is a consequence of the circumstance that TLS is not yet configured to a production level on the Apache HTTP server, as noted previously.

Now create the SAML metadata template file `'test-sp.clarin.eu.template.metadata.xml'` in `~/'instance-1/etc/shibboleth'` in the following way.

. Check out the SAML metadata batch kept in the CLARIN Subversion repository:
+
[source,Sh]
----
mkdir --parents ~/'CLARIN/SVN/parts/' ;
(cd ~/'CLARIN/SVN/parts/' &&
svn checkout 'https://svn.clarin.eu/aai/')
----
+
. Open `~/'CLARIN/SVN/parts/aai/clarin-sp-metadata.xml'` with your XML editor. Find an example of good SAML metadata about an SP, an `md:EntityDescriptor` element. The best starting point to determine what is '`good`' are CLARIN's own http://www.clarin.eu/content/guidelines-saml-metadata-about-your-sp[guidelines for SAML metadata about SPF SPs].
+
. Copy this `md:EntityDescriptor` element into a new XML file in your XML editor.
. Fetch the original SAML metadata about your SP being generated by the Metadata Generator handler by opening https://test-sp.clarin.eu/Shibboleth.sso/Metadata in your XML editor.
. Modify the new XML file to describe _your_ SP instead.
.. Remove all comments and leaf elements from `'test-sp.clarin.eu.template.metadata.xml'` insofar they are already in https://test-sp.clarin.eu/Shibboleth.sso/Metadata. For example, the original:
+
[source,XML]
----
include::basic_SAML_metadata_about_test-sp.clarin.eu.xml[]
----
+
will lead you to a template such as:
+
[source,XML]
----
include::test-sp.clarin.eu.template.metadata.xml[]
----
+
.. Save the file.
. Add the contents (again, the `md:EntityDescriptor`) of the previously saved `'test-sp.clarin.eu.template.metadata.xml'` as an element under `/md:EntitiesDescriptor` in your checked out version of `'clarin-sp-metadata.xml'`. Save the latter file.
. Validate the file with your XML editor and the appropriate XML catalog of XSD schemas, or alternatively using the accompanying command line utility `'check_saml_metadata.sh'`.
+
[source,Sh]
----
(cd ~/'CLARIN/SVN/parts/aai/' &&
./check-saml-metadata/check_saml_metadata.sh 'clarin-sp-metadata.xml')
----
+
. Once validation has succeeded and you have double-checked the final contents yourself, commit your revision of the SAML metadata batch back to the CLARIN SVN.
+
[source,Sh]
----
(cd ~/'CLARIN/SVN/parts/aai/' &&
svn commit 'clarin-sp-metadata.xml')
----
// TODO: Attribute mapping

=== Pushing your revisions to your Shibboleth Service Provider configuration

Push your changes Shibboleth SP configuration directory to your SP-host:

[source,Sh]
----
(cd ~/instance-1/etc/shibboleth/ &&
rsync --archive --backup --itemize-changes --no-owner --no-group --relative --update -v '.' 'instance-1:shibboleth')
----

Then on your SP host, push the new-config to `/etc/shibboleth`:

[source,Sh]
----
(cd ~/shibboleth/ &&
sudo rsync --archive --backup --itemize-changes --no-owner --no-group --relative --update -v '.' '/etc/shibboleth')
----
== Starting and enabling Shibboleth SP and Apache HTTP Server
(Re)start `shibd`:

[source,Sh]
----
sudo systemctl restart 'shibd'
----

If that succeeds, you are now ready to (re)start the Apache HTTP server:

[source,Sh]
----
sudo systemctl restart 'httpd'
----

If these steps succeeded, enable automatic starting of the Apache HTTP server and Shibboleth SP after bootup:

[source,Sh]
----
sudo systemctl enable 'shibd' 'httpd'
----

== Checking SAML metadata about your SP

Do a check whether the SAML metadata about your SP being generated by the Metadata Generator handler is of the desired quality, by opening the URL 'https://test-sp.clarin.eu/Shibboleth.sso/Metadata' in your XML editor. In case anything is wrong, follow the previous steps in <<Creating SAML metadata about your SP for external distribution>> again (without necessarily starting over completely).

== Final results

To check whether your unprotected resource is being served out over HTTP:

[source,Sh]
----
curl --insecure 'https://test-sp.clarin.eu/my_resource.txt'
----

You should see the contents of your unprotected resource now.

By visiting https://test-sp.clarin.eu/my_resource.txt and https://test-sp.clarin.eu/protected/my_resource.txt, you will see that the one resource is freely accessible, whereas the other only after going through the CLARIN central discovery service and selecting the CLARIN IdP.